package common

/*
	The format of binary chunk.
	+-----------------------+ ---
	|	signature			|  |
	-------------------------  |
	|	version				|  |
	-------------------------  |
	|	format				|  |
	-------------------------  |
	|	luac data			|  |
	-------------------------  |
	|	cint size			|  |
	-------------------------  | header
	|	csizet size			|  |
	-------------------------  |
	|	instruction size	|  |
	-------------------------  |
	|	lua Integer size	|  |
	-------------------------  |
	|	lua Number size		|  |
	-------------------------  |
	|	luac int			|  |
	-------------------------  |
	|	luac num			|  |
	+-----------------------+ ---
	|	size upvalues		|  | size upvalues
	+-----------------------+ ---
	|	Source				|  |
	-------------------------  |
	|	LineDefined			|  |
	-------------------------  |
	|	LastLineDefined		|  |
	-------------------------  |
	|	Numparams			|  |
	-------------------------  |
	|	IsVararg			|  |
	-------------------------  |
	|	MaxStackSize		|  | function prototype
	-------------------------  |
	|	Code				|  |
	-------------------------  |
	|	Constants			|  |
	-------------------------  |
	|	Upvalues			|  |
	-------------------------  |
	|	Protos				|  |
	-------------------------  |
	|	LineInfo			|  |
	-------------------------  |
	|	LocVars				|  |
	-------------------------  |
	|	UpvalueNames		|  |
	+-----------------------+ ---

	signature:		Magic number of lua, 4 bytes size.
					Occupied by 'ESC','L','u','a' in ASCII. The value is "\x1bLua" in golang string type.
	version:		The version of lua, 1 byte size.
					The value combined by major version and minor version only. For exmaple, "0x51" is the value of the 5.1.1 version.
	format:			The format number of chunk. The Lua offical format number is 0.
	luac data:		The value is combined by year, '\r', '\n', '\x1a' and '\n'. The value of the year when lua was published is 1993.
	cint size:		The size of C int type is 4 bytes.
	csizet size:	The size of C size_t type is 8 bytes.
	instruction size:	The size of lua virtual machine. The Value is 4 bytes.
	lua integer size: 	The size of lua integer is 8 bytes.
	lua number size:	The size of lua number is 8 bytes.
	luac int:		The field is used to check the endian type, Big-Endian or Little-Endian. The integer value is 0X5678. Lua virtual machine will
	        		check wether the vlaue is 0X5678. If not, it means the endian in chunk is different from the endian in CPU. And will refuse to
					load the chunk file.
	luac num:		The field is use to check the float format. The float value is 370.5, Lua virtual machine will use this value to check wheter
					the format in chunk file is the same as the format in CPU.
	size upvalues: 	Record the number of upvalue field in main function.
	main function: 	Proto type of function.
	Source:			The name of source code file. The value is combined by length+1 and string which is the file name.
					First char of the string could be '@','=stdin' or nothing. '@' means the chunk is generated by
					source code file. '=stdin' means the chunk is generated by standard input.
	LineDefined:	The start line number of the function.
	LastLineDefined:The end line number of the function.
	Numparams:		The number of parameters.
	IsVararg:		Whether the amount of parameters is varialble.
	MaxStackSize:	The number of registers. This value is generated during compiling by Lua Virtual Machine.
					The registers is implemented by stack, so this field is also called 'max stack size'.
	Code:			The table of codes. Each code occupy 4 bytes.The virtural machine codes, which are compiled from the source codes in function.
	Constants:		Store literals in lua, support types: nil, boolean, integer, number, short string, long string. The first byte of the constant
					is the tag of those type.
					tag				literal type
					0x00			nil
					0x01			boolean
					0x03			number
					0x13			integer
					0x04			short string
					0x14			long string
	UpValues:		The table of upvalues. The size of each upvalue is 2 bytes.
	Protos:			The protos of sub function.
	LineInfo:		The table of line information. Line number stored in cint type.
					The line number in the line information table corresponds to the code in the code table.
					This store the code corresponds to source code where located in the source code file.
	LocVars:		The table of local variables.
	UpvalueNames:	The table of upvalue names. These names corresponds to the value in Upvalues.
*/
const (
	LUA_SIGNATURE = "\033Lua" //Esc+lua
	LUAC_VERSION  = 0x51      //5.1 version
	LUAC_FORMAT   = 0         //format number
	// LUAC_DATA        = "\x19\x93\r\n\x1a\n"
	ENDIAN           = 1 // Big endian is 0. Little endian is 1.
	INT_SIZE         = 4
	SIZET_SIZE       = 4
	INSTRUCTION_SIZE = 4
	// LUA_INTEGER_SIZE = 8
	LUA_NUMBER_SIZE = 8
	// LUAC_INT         = 0x5678
	// LUAC_NUM         = 370.5
	FLAT = 0 //Float is 0. Integer is 1.
)

const (
	TAG_NIL       = 0x00
	TAG_BOOLEAN   = 0x01
	TAG_NUMBER    = 0x03
	TAG_INTEGER   = 0x13
	TAG_SHORT_STR = 0x04
	TAG_LONG_STR  = 0x14
)

type binaryChunk struct {
	header // Header of the chunk
	// sizeUpvalues byte       // The count of upvalues in main function
	mainFunc *Prototype // The proto type of the main function
}

type header struct {
	signature [4]byte
	version   byte
	format    byte
	// luacData        [6]byte
	cintSize        byte
	sizetSize       byte
	instructionSize byte
	// luaIntegerSize  byte
	luaNumberSize byte
	// luacInt         int64
	// luacNum         float64
	flat byte
}

// function prototype
type Prototype struct {
	Source          string // debug
	LineDefined     uint32
	LastLineDefined uint32
	sizeUpvalues    byte // The count of upvalues in main function
	NumParams       byte
	IsVararg        byte
	MaxStackSize    byte
	Code            []uint32
	Constants       []interface{}
	// Upvalues        []Upvalue
	Protos []*Prototype
	// LineInfo        []uint32 // debug
	// LocVars         []LocVar // debug
	// UpvalueNames    []string // debug
}

/*
	Upvalue is a variable in the enclosing function.
	The variable is used by the nesting function, and is called upvalue in the nesting function.
	There are three kinds of variables in lua, such as local variable, upvalue, global variable.
	Local variable is defined in a function.
	Upvalue is defined in a enclosing function, and used by a nesting function.
	Global variable is defined in _ENV.
*/
type Upvalue struct {
	Instack byte
	Idx     byte
}

type LocVar struct {
	VarName string
	StartPC uint32
	EndPC   uint32
}

func IsBinaryChunk(data []byte) bool {
	return len(data) > 4 &&
		string(data[:4]) == LUA_SIGNATURE
}

func Undump(data []byte) *Prototype {
	reader := &reader{data}
	reader.checkHeader()
	reader.readByte() // size_upvalues
	return reader.readProto("")
}
